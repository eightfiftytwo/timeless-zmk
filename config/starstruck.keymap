#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_jk_esc {
            bindings = <&kp ESC>;
            key-positions = <20 19>;
        };

        combo_switch_lang {
            bindings = <&kp LG(SPACE)>;
            key-positions = <37 40>;
            require-prior-idle-ms = <250>;
        };

        combo_rhand_up {
            bindings = <&kp UP>;
            key-positions = <20 8>;
        };

        combo_rhand_left {
            bindings = <&kp LEFT>;
            key-positions = <18 19>;
        };

        combo_rhand_down {
            bindings = <&kp DOWN>;
            key-positions = <20 32>;
        };

        combo_rhand_right {
            bindings = <&kp RIGHT>;
            key-positions = <20 21>;
        };

        combo_home {
            bindings = <&kp HOME>;
            key-positions = <7 19>;
            require-prior-idle-ms = <250>;
        };

        combo_end {
            bindings = <&kp END>;
            key-positions = <9 21>;
            require-prior-idle-ms = <250>;
        };

        combo_pg_up {
            bindings = <&kp PG_UP>;
            key-positions = <31 32>;
            require-prior-idle-ms = <250>;
        };

        combo_pg_dn {
            bindings = <&kp PG_DN>;
            key-positions = <33 34>;
            require-prior-idle-ms = <250>;
        };

        combo_undo {
            bindings = <&kp LC(Z)>;
            key-positions = <30 18>;
            require-prior-idle-ms = <250>;
        };

        combo_cut {
            bindings = <&kp LC(X)>;
            key-positions = <31 19>;
            require-prior-idle-ms = <250>;
        };

        combo_copy {
            bindings = <&kp LC(C)>;
            key-positions = <33 21>;
            require-prior-idle-ms = <250>;
        };

        combo_paste {
            bindings = <&kp LC(V)>;
            key-positions = <34 22>;
            require-prior-idle-ms = <250>;
        };

        combo_select_all {
            bindings = <&kp LC(A)>;
            key-positions = <22 21>;
            require-prior-idle-ms = <250>;
        };

        combo_bookmark {
            bindings = <&kp LC(D)>;
            key-positions = <15 27>;
            require-prior-idle-ms = <250>;
        };

        combo_find {
            bindings = <&kp LC(F)>;
            key-positions = <28 16>;
            require-prior-idle-ms = <250>;
        };

        combo_ctrl_shift {
            bindings = <&sk LC(LSHIFT)>;
            key-positions = <6 18>;
            require-prior-idle-ms = <250>;
        };

        combo_sym_1 {
            bindings = <&kp EXCL>;
            key-positions = <1 13>;
            require-prior-idle-ms = <250>;
        };

        combo_sym_2 {
            bindings = <&kp AT>;
            key-positions = <2 14>;
            require-prior-idle-ms = <250>;
        };

        combo_sym_3 {
            bindings = <&kp POUND>;
            key-positions = <3 15>;
            require-prior-idle-ms = <250>;
        };

        combo_sym_4 {
            bindings = <&kp DOLLAR>;
            key-positions = <4 16>;
            require-prior-idle-ms = <250>;
        };

        combo_sym_5 {
            bindings = <&kp PERCENT>;
            key-positions = <5 17>;
            require-prior-idle-ms = <250>;
        };

        combo_dqt {
            bindings = <&kp DQT>;
            key-positions = <15 16>;
            require-prior-idle-ms = <250>;
        };

        combo_sqt {
            bindings = <&kp SQT>;
            key-positions = <13 14>;
            require-prior-idle-ms = <250>;
        };

        combo_lalt {
            bindings = <&sk LALT>;
            key-positions = <37 38>;
            require-prior-idle-ms = <250>;
        };

        combo_printscreen {
            bindings = <&kp PSCRN>;
            key-positions = <40 39>;
            require-prior-idle-ms = <250>;
        };

        combo_eq {
            bindings = <&kp EQUAL>;
            key-positions = <17 16>;
            require-prior-idle-ms = <250>;
        };

        combo_lpar {
            bindings = <&kp LPAR>;
            key-positions = <3 4>;
            require-prior-idle-ms = <250>;
        };

        combo_lbkt {
            bindings = <&kp LBKT>;
            key-positions = <3 2>;
            require-prior-idle-ms = <250>;
        };

        combo_lbrc {
            bindings = <&kp LBRC>;
            key-positions = <1 2>;
            require-prior-idle-ms = <250>;
        };

        combo_caret {
            bindings = <&kp CARET>;
            key-positions = <25 13>;
            require-prior-idle-ms = <250>;
        };

        combo_amps {
            bindings = <&kp AMPS>;
            key-positions = <26 14>;
            require-prior-idle-ms = <250>;
        };

        combo_star {
            bindings = <&kp STAR>;
            key-positions = <17 29>;
            require-prior-idle-ms = <250>;
        };

        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <26 25>;
            require-prior-idle-ms = <250>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <27 28>;
            require-prior-idle-ms = <250>;
        };

        combo_tilde {
            bindings = <&kp TILDE>;
            key-positions = <13 12>;
            require-prior-idle-ms = <250>;
        };

        combo_pipe {
            bindings = <&kp PIPE>;
            key-positions = <26 27>;
            require-prior-idle-ms = <250>;
        };

        combo_backslash {
            bindings = <&kp BSLH>;
            key-positions = <25 24>;
            require-prior-idle-ms = <250>;
        };

        combo_rpar {
            bindings = <&kp RPAR>;
            key-positions = <7 8>;
            require-prior-idle-ms = <250>;
        };

        combo_rbkt {
            bindings = <&kp RBKT>;
            key-positions = <8 9>;
            require-prior-idle-ms = <250>;
        };

        combo_rbrc {
            bindings = <&kp RBRC>;
            key-positions = <9 10>;
            require-prior-idle-ms = <250>;
        };

        combo_lt {
            bindings = <&kp LT>;
            key-positions = <5 4>;
            require-prior-idle-ms = <250>;
        };

        combo_gt {
            bindings = <&kp GT>;
            key-positions = <6 7>;
            require-prior-idle-ms = <250>;
        };
    };

    behaviors {
        shift_caps: shift_caps {
            compatible = "zmk,behavior-mod-morph";
            label = "Shift/Caps";
            bindings = <&qsk RSHFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        qsk: qsk {
            compatible = "zmk,behavior-sticky-key";
            label = "Quick release sticky key";
            bindings = <&kp>;
            #binding-cells = <1>;
            quick-release;
            release-after-ms = <1000>;
        };

        spc_under: spc_under {
            compatible = "zmk,behavior-mod-morph";
            label = "Space/Underscore";
            bindings = <&kp SPACE>, <&kp UNDER>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        mt_spc_: mt_spc_ {
            compatible = "zmk,behavior-hold-tap";
            label = "Mod/Space/Underscore";
            bindings = <&kp>, <&spc_under>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        lrpar: lrpar {
            compatible = "zmk,behavior-mod-morph";
            label = "(|)";
            bindings = <&kp LPAR>, <&kp RPAR>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        lrbkt: lrbkt {
            compatible = "zmk,behavior-mod-morph";
            label = "[|]";
            bindings = <&kp LBKT>, <&kp RBKT>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        lrbrc: lrbrc {
            compatible = "zmk,behavior-mod-morph";
            label = "{|}";
            bindings = <&kp LBRC>, <&kp RBRC>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        grtab: grtab {
            compatible = "zmk,behavior-mod-morph";
            label = "Grave/Tab";
            bindings = <&kp TAB>, <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty {
            bindings = <
&grtab     &kp Q  &kp W  &kp E  &kp R            &kp T        &kp Y        &kp U     &kp I        &kp O    &kp P          &kp DEL
&sk LCTRL  &kp A  &kp S  &kp D  &kp F            &kp G        &kp H        &kp J     &kp K        &kp L    &kp SEMICOLON  &kp SQT
&sk LSHFT  &kp Z  &kp X  &kp C  &kp V            &kp B        &kp N        &kp M     &kp COMMA    &kp DOT  &kp FSLH       &kp RCTRL
                         &sl 2  &mt_spc_ LGUI 0  &lt 2 TAB    &lt 1 ENTER  &kp BSPC  &shift_caps
            >;
        };

        symbol {
            bindings = <
&kp GRAVE  &kp EXCLAMATION  &kp AT_SIGN  &kp POUND  &kp DOLLAR  &kp PERCENT     &kp CARET  &kp AMPERSAND  &kp DQT   &kp SQT   &kp STAR   &kp BACKSPACE
&trans     &kp TILDE        &kp LBRC     &kp LBKT   &kp LPAR    &kp EQUAL       &kp PLUS   &kp RPAR       &kp RBKT  &kp RBRC  &kp MINUS  &trans
&trans     &kp BSLH         &kp LT       &kp GT     &kp DOT     &kp QUESTION    &kp COMMA  &trans         &trans    &trans    &kp FSLH   &trans
                                         &trans     &spc_under  &trans          &trans     &trans         &trans
            >;
        };

        numpad {
            bindings = <
&to 3   &kp F2     &kp C_VOL_DN  &kp C_MUTE  &kp C_VOL_UP  &kp F12      &kp CARET  &kp N7  &kp N8  &kp N9  &kp STAR   &trans
&trans  &kp TILDE  &lrbrc        &lrbkt      &lrpar        &kp EQUAL    &kp PLUS   &kp N4  &kp N5  &kp N6  &kp MINUS  &trans
&trans  &kp BSLH   &kp LT        &kp GT      &kp DOT       &kp QMARK    &kp COMMA  &kp N1  &kp N2  &kp N3  &kp FSLH   &trans
                                 &trans      &trans        &trans       &kp N0     &trans  &trans
            >;
        };

        fn_bt {
            bindings = <
&to 0   &kp F1   &kp F2   &kp F3  &kp F4  &kp F5    &kp F6         &kp F7         &kp F8         &kp F9         &kp F10     &trans
&trans  &kp F11  &kp F12  &trans  &trans  &trans    &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_CLR  &trans
&trans  &trans   &trans   &trans  &trans  &trans    &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &trans      &kp PRINTSCREEN
                          &trans  &trans  &trans    &trans         &trans         &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
